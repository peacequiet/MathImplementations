def matrix_add(mtx_1, mtx_2):                               # adds matrices of the same size // TODO: make conditions more stringent
    mtx_1_row_length = len(mtx_1[0])
    if len(mtx_1) == len(mtx_2) and mtx_1_row_length == len(mtx_2[0]):    # check to ensure the matrices are actually the same size
        mtx_3 = [[0] * mtx_1_row_length for i in mtx_1]
        for i, val in enumerate(mtx_1):
            for j, val in enumerate(mtx_1[i]):
                mtx_3[i][j] = mtx_1[i][j] + mtx_2[i][j]                     # adds elements together iteratively
    return mtx_3

def scalar_mul(s, mtx):
    mtx_return = list(mtx)
    for i, val in enumerate(mtx):
        for j, val in enumerate(mtx[i]):
            mtx_return[i][j] = s * mtx_return[i][j]
    return mtx_return

# matrix_1 = [[1, 2, 3], [3, 2, 1], [1, 2, 1]]
# matrix_2 = [[1, 2, 3], [3, 2, 1], [1, 2, 1]]

# matrix_3 = matrix_add(matrix_1, matrix_2)
# matrix_3 = scalar_mul(3, matrix_3)

# print(matrix_3)